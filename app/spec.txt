MapImageBasics
    new MapImageBasics(lon, lat, w, h, z, highQ::bool, attrib::bool)
    lon,lat::double, mid-cordinates
    w/h::double, degrees
    zoom::int(0-22)
    inv: lat+h/2<=90, lat-h/2>=-90
         w <= 360

MapFetcher, static
    fetchMapImges(mapImageBasics) -> BasicImage[]
        [0] - mapImg
        [1] - labelImg
        [2] - boxImg

    fetchRawImage(max dim 1280*1280) -> BufferedImage
    ...

BasicImage
    img::BufferedImage
    new BasicImage(img::BufferedImage)
    rotate(deg)::BasicImage
    extract(box)::BasicImage
    copy()::BasicImage
    static concatenateImages(BasicImages[][] layout)

MapImage<-BasicImage
    labels::Labels
    basics::MapImageBasics
    new MapImage(mib::MapImageBasics, mapImg::BasicImage, labelImg(null?)::BasicImage, boxImg::BasicImage)
    new MapImage(mib, imgs::BasicImages[map,label,box])
    fetchAndSetLabelCategories()::void throws IOException
    removeUnspecifiedLabels()::void

BoxImage
    new BoxImage(boxImg::BasicImage, alphaTreshold::int)
    (alphaTreshold: pixels alpha-value- over means show, under means hide)

    inner:
    LabelLayoutIter
        next()::LabelLayout
        hasMore()::Boolean(sets next)

        findBoxPoint()::Point/NULL
        findNeighborBoxPoint(LEFT/RIGHT, startBox::Box)::Point/NULL
        findNeighborRowPoint(UP/DOWN, startRow:Box[])::Point/NULL
        expandToRow(boxed-Point)::Box[]
        addBoxes(LEFT/RIGHT, startBox::Box, accum(contains startBox)::Box[])::Box[]
        addRows(UP/DOWN, startRow::Box[], labelLayout(accumulator, contains startRow))::LabelLayout
        removeLabel(layout::LabelLayout)::Void

        expandToBox(boxed-Point)::Box
            expandToBoxPoints(boxed-Point)::Point[]
            getCorners(points::Point[])::Point[](0Left 1Up 2Right 3Down)
                findExtremes(Point[])::Point[](0Left 1Up 2Right 3Down)
                rotate(Point[], deg)::Point[]

Label
    new Label(text::String, layout::LabelLayout)
    new Label(labelImg::BasicImage, layout::LabelLayout)
    text: String
    category: enum
    layout: LabelLayout
    setCategory(c::category enum)
    fetchCategory(mapImageBasics)::category enum (if place not found, returns undefined-category)

Labels(tied to a mapImage)
    labels Label[]
    new Labels(labelImg::BasicImage, boxImg::BoxImage)
        iter = new boxImage.LabelLayoutIter()
            layout = iter.next()
            labels[i] = new Label(labelImg, layout)
    fetchAndSetCategories(mapImageBasics)
        for each label:
            c = label.fetchCategory(mapImageBasics)
            label.setCategory(c)

LabelLayout
    new LabelLayout(row::Box[])
    letterBoxes: Box[row][pos in row]
    addRowFirst(row::Box[])
    addRowLast(row::Box[])
    getBoxes()::Box[] (1d)
    getBox(x,y)
    getHighest()
    getLowest()
    getLeftest()
    getRightest()
    getAverageHeight()::double
    getBoundingBox()::double[xmin,ymin,xmax,ymax]

    innner:
    LetterBoxIter
        row = 0
        pos = 0
        next = null
        new LetterBoxIter()
        next()::Box/null(delim)
        hasMore()::boolean(sets next)

Box
    new Box(topLeft,topRight,bottomRight,bottomLeft)
    topLeft,topRight,height
    getRotation() -> float
    getTopLeft()
    getTopRight()
    getBottomLeft()
    getBottomRight()
    getTopMid()
    getBottomMid()
    getLeftMid()
    getRightMid()
    getHighest()
    getLowest()
    getLeftest()
    getRightest()

Map
    lon,lat,width,height::Double
    zoomLevelImgs::MapImage[]
    new Map(lon::Double, lat::Double, width::Double, height::Double)
    addZoomLevel(img::MapImage)::void









Example:
mapBasics = new MapBasics(5345,34543,1280,1277,14)
BufferedImage[] imgs = fetchMapImages(mapBasics)    //network
mapImg = new MapImage(imgs[0])
labelsImg = new MapImage(imgs[1])
boxImg = new BoxImage(imgs[2])
map = new Map(mapBasics, mapImg, labelsImg, boxImg)
map.fetchAndSetLabelCategories()                    //network
map.removeUnspecifiedLabels()
//how many removed?


labels = new Labels(labelImg, boxImg):
    labels = []
    auxBImg = boxImg.clone()
    iter = new auxBImg.LabelLayoutIter()
    while (iter.hasMore())
        layout = iter.next()
        text = labelImg.detectLabel(layout)
        category = Label.fetchCategory(text)
        label = new Label(layout, text, category)
        labels.append(label)


iter = new auxBImg.LabelLayoutIter()
    next = NULL
    getNext() return next
    hasMore()::LabelLayout:
        p = findBoxedPoint()
        if p is NULL:
            next = NULL
            return FALSE

        startRow = expandToRow(p)
        layout = new LabelLayout(startRow)
        addRows(UP, startRow, layout)
        addRows(DOWN, startRow, layout)
        turnOffBoxedPoints(layout.getBoxes())
        next = layout
        return TRUE
