MapImageView
    lon,lat::double, mid-cordinates
    w/h::int (in pxs - depends on doubleQ)
    zoom::int(0-22)
    tileSize::int
    new MapImageView(lon, lat, w, h, z, doubleQ::bool)
    new MapImageView(westLon::double, northLat, eastLon, southLat, z, doubleQ)
    new MapImageView([WNES], z, doubleQ)
    split(maxWH::int)::MapImageView[][]
    getExtendedView()::MapImageView
    getGeoCoordinates(x::double, y::double)::double[lon,lat]
    getPixelCoordinates(lon::double, lat::double)::double[x,y]
    static getGlobalPixelCoordinates(lon, lat, zoom, tileSize)
    static getGeoCoordinates_global(xGlobal::int, yGlobal::int, tileSize)

    inv:
        -180 < lon < 180
        -85 < lat < 85 (2*arctan(e^pi) - pi/2)
        w/h > 0
        0 <= zoom <= 22
        lat-bounds inside +-85...

MapRequest
    lon,lat::double
    w,h::int(pxs in lowQ)
    zoom::int(0-22)
    doubleQ::bool
    attrib::bool

    new MapRequest(view::MapImageView, tileSize::int)
    fetch3()::TiledImage[map,label,box]
    fetch(style::String)::TiledImage
        split(maxWH::int)::MapRequest[][]
        fetchRaw(style::String)::BasicImage (pre: maxdim 1280*1280)

BasicImage
    img::BufferedImage
    new BasicImage(img::BufferedImage)
    //rotate(deg)::BasicImage
    extractElement(box)::BasicImage (returns un-rotated subsection)
    copy()::BasicImage
    crop(x::int, y::int, width::int, height::int)::BasicImage
    static concatenateImages(BasicImages[][] layout)

    inner:
    PixelWalk
        new PixelWalk(startX::int, startY, endX, endY)
        currentX, currentY::int
        hasMore()::Bool(sets next)
        next()::int[x,y]

TiledImage
    dir::Path
    getWidth/Height()
    getColor(x,y)::Color
    setColor(x,y, Color)
    drawPixel(x,y, Color)
        (blends pixels: AlphaComposite-SRC_OVER)
    drawRect(xmin,ymin,xmax,ymax, Color)
    isInside(x,y)::boolean
    getOneImage()::BasicImage
    getSubImage(xmin,ymin,xmax,ymax)::BasicImage
    static Builder
        new Builder(path::File)
        add(img::BasicImage)
        build()::TiledImage


MapImage
    img::TiledImage
    imgView::MapImageView
    labels::Label[]
    # new MapImage(viewportView::MapImageView, imgView::MapImageView, imgs::BasicImages[map,label,box], lang::OCRenum)
    #     pre: viewportView fits in imgView. imgView and imgs correspond.
    new MapImage([WNES], zoom::int, doubleQ::bool, lang::OCRenum)
        (uses internet) throws IOException
        (extends WNES to: fit cut labels and detect edge-labels)
    # addLabelOffset(x::int, y::int)::void
    fetchAndSetPlaceCategories()::void throws IOException
    removeUnknownLabels()::void

LabelLayoutIterator
    map::boolean[][]
    startRow::int
    startCol::int
    new LabelLayoutIterator(boxImg::BasicImage, alphaTreshold::int)
    (alphaTreshold: pixels alpha-value- over means show, under means hide)
    next()::LabelLayout/NULL (starts search at startX/Y, and sets)

    findBoxPoint(startX::int, startY::int)::Point/NULL(if no more box-points)
    expandToLabel(box-point)::LabelLayout/NULL(if bp wont expand)
    expandToRow(Box b)::Box[]
        (if nothing there, bad rot/size, edge or edge-box(null): stops looking in that dir)
    addRows(UP/DOWN, startRow::Box[], lay(accumulator, contains startRow)::LabelLayout)::LabelLayout
        (done if nothing neighbor-row-like there)
    removeLabel(lay::LabelLayout)::Void
    expandAndRemove(Point)::Void
    isEdgeLabel(labelLayout)::boolean

    expandToBox(box-point)::Box/NULL(if at box-image-edge)
    addBoxes(LEFT/RIGHT, startBox::Box, accum(contains startBox)::Box[])::Box[]
        (done if nothing neighbor-box-like there)

    findNeighborRow(UP/DOWN, startRow::Box[])::Box[]/NULL(if nothing neighbor-row-like there)
    findNeighborBox(LEFT/RIGHT, startBox)::Box/NULL(if nothing neighbor-box-like there)



    # findBoxPoint(startX::int, startY::int)::Point/NULL
    # expandToRow(box-point::Point)::Box[]
    #     (result may start/end in null: outside of box-image. [null] possible)
    # addRows(UP/DOWN, startRow::Box[], lay(accumulator, contains startRow)::Box[][])::Box[][]
    #     (done if nothing there OR startRow has(/finds row with) null start/end)
    #     (always adds found row to accum, even if null start/end..)
    # removeLabel(lay::LabelLayout)::Void
    #     (ignores null-start/ends)
    # expandAndRemove(p::int[])::Void

    # expandToBox(box-point::Point)::Box/NULL (null if at box-image-edge)
    # addBoxes(LEFT/RIGHT, startBox::Box, accum(contains startBox)::Box[])::Box[]
    #     (done if nothing there OR startBox is null)

    # findNeighborRow(UP/DOWN, startRow:Box[])::Box[]/NULL
    #     (nothing there::null, something that failed to expand to box::[null],
    #     first boxes then edge::[(null),b,b,(null)], all good::[b,b,b])
    # findNeighborBox(LEFT/RIGHT, startBox::Box)::Box/NULL
    #     (returns null if 1.nothing there. 2.box-image-edge there. 3.bp expanded to null(because edge))
    # somethingThere(LEFT/RIGHT, startBox::Box, searchLength::double)::boolean


# Label
#     text: String
#     category: enum
#     layout: LabelLayout
#     new Label(text::String, layout::LabelLayout, category)
#     new Label(labelImg::BasicImage, layout::LabelLayout, OCREngine)
#         (OCREngine set to corresponding language)
#     addOffset(addX::int, addY::int)
#     setCategory(c::category enum)
#     fetchCategory(double[wnes])::category enum (if place not found, returns undefined-category)

Places
    places::Place[]
    add(label::LabelLayout, labelImg::BasicImage, OCREngine)
        (OCREngine set to corresponding language)
        (ignore if existing layout, adds layout if existing name, else new entry)
    findPlace(name::String)::Place
    removeRandom...()::Place
    getPlaces()::Place[](shallow copy)
    copy()::Places

Place
    name::String
    labels::LabelLayout[]
    category::enum
    new Place(name, labels, [category])
    addLayout(lay::LabelLayout)
    hasLayout(lay::LabelLayout)::boolean
    addOffset(addX::int, addY::int)
    getLabels()::LabelLayout[](shallow copy)
    setCategory(c::category enum)
    fetchCategory(double[wnes])::category enum (if place not found, returns undefined-category)

//skip
Labels(tied to a mapImage)
    labels Label[]
    new Labels(labelImg::BasicImage, boxImg::BoxImage)
        iter = new boxImage.LabelLayoutIter()
            layout = iter.next()
            labels[i] = new Label(labelImg, layout)
    fetchAndSetCategories(mapImageBasics)
        for each label:
            c = label.fetchCategory(mapImageBasics)
            label.setCategory(c)

OCR
    OCREngine::...
    Language::enum
    new OCR(language)
    detectString(img::BasicImage)::string

LabelLayout
    letterBoxes: Box[row][pos in row]
    new LabelLayout(row::Box[])
    addRowFirst(row::Box[])
    addRowLast(row::Box[])
    getBoxes()::Box[] (1d)
    getBox(r,c)
    getTallestBoxHeight()::double
    getBounds()::double[xmin,ymin,xmax,ymax]
    hasRotation()::boolean
    addOffset(addX::int, addY::int)

    // innner:
    // LetterBoxIter
    //     row = 0
    //     pos = 0
    //     next = null
    //     new LetterBoxIter()
    //     next()::Box
    //     hasMore()::boolean(sets next)

Box
    new Box(ps::list) (fit from points, symbol [)
    topLeft,topRight,height
    //containsPoint(x::int, y::int)
    getRotation()::double
    getDirVector()::double[]
    //isCentered(box::Box)::bool
    getWidth()::double
    getHeight()::double
    getTopLeft()::double[x,y]
    getTopRight()
    getBottomLeft()
    getBottomRight()
    getTopMid()
    getBottomMid()
    getLeftMid()
    getRightMid()
    getMid()
    getBounds()::double[xmin,ymin,xmax,ymax]
    addOffset(addX::int, addY::int)

Map
    bounds::double[WNES]
    zoomLevelImgs::MapImage[]
    new Map(westLon::double, northLat, eastLon, southLat, lang::OCRenum)
    addZoomLevel()::void (uses internet) throws IOException
    hasZoomLevel(int z)::bool
    getBounds()::double[]







Example:
mapBasics = new MapBasics(5345,34543,1280,1277,14)
BufferedImage[] imgs = fetchMapImages(mapBasics)    //network
mapImg = new MapImage(imgs[0])
labelsImg = new MapImage(imgs[1])
boxImg = new BoxImage(imgs[2])
map = new Map(mapBasics, mapImg, labelsImg, boxImg)
map.fetchAndSetLabelCategories()                    //network
map.removeUnspecifiedLabels()
//how many removed?


labels = new Labels(labelImg, boxImg):
    labels = []
    auxBImg = boxImg.clone()
    iter = new auxBImg.LabelLayoutIter()
    while (iter.hasMore())
        layout = iter.next()
        text = labelImg.detectLabel(layout)
        category = Label.fetchCategory(text)
        label = new Label(layout, text, category)
        labels.append(label)


iter = new auxBImg.LabelLayoutIter()
    next = NULL
    getNext() return next
    hasMore()::LabelLayout:
        p = findBoxedPoint()
        if p is NULL:
            next = NULL
            return FALSE

        startRow = expandToRow(p)
        layout = new LabelLayout(startRow)
        addRows(UP, startRow, layout)
        addRows(DOWN, startRow, layout)
        turnOffBoxedPoints(layout.getBoxes())
        next = layout
        return TRUE
