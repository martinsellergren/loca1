MapImageView
    lon,lat::double, mid-cordinates
    w/h::int (in pxs - depends on doubleQ)
    zoom::int(0-22)
    tileSize::int
    new MapImageView(lon, lat, w, h, z, doubleQ::bool)
    new MapImageView(westLon::double, northLat, eastLon, southLat, z, doubleQ)
    getGeoCoordinates(x::double, y::double)::double[lon,lat]
    getPixelCoordinates(lon::double, lat::double)::double[x,y]
    static getGlobalPixelCoordinates(lon, lat, zoom, tileSize)
    static getGeoCoordinates_global(xGlobal::int, yGlobal::int, tileSize)

    inv:
        -180 < lon < 180
        -85 < lat < 85 (2*arctan(e^pi) - pi/2)
        w/h > 0
        0 <= zoom <= 22
        lat-bounds inside +-85...

MapRequest
    lon,lat::double
    w,h::int(pxs in lowQ)
    zoom::int(0-22)
    doubleQ::bool
    attrib::bool

    globals...
    DEFAULT_TILE_SIZE
    EXTENSION_TERM

    new MapRequest(lon,lat,w,h,z,doubleQ,attrib,ext)
    new MapRequest(view::MapImageView, attribution::bool, extended::bool)
    fetch3()::BasicImage[map,label,box]
    fetch(style::String)::BasicImage
        split(maxWH::int)::MapRequest[][]
        fetchRaw(style::String)::BasicImage (pre: maxdim 1280*1280)

BasicImage
    img::BufferedImage
    new BasicImage(img::BufferedImage)
    //rotate(deg)::BasicImage
    extractElement(box)::BasicImage (returns un-rotated subsection)
    copy()::BasicImage
    static concatenateImages(BasicImages[][] layout)

    inner:
    PixelWalk
        new PixelWalk(startX::int, startY, endX, endY)
        currentX, currentY::int
        hasMore()::Bool(sets next)
        next()::int[x,y]

MapImage<-BasicImage
    labels::Label[]
    viewportView::MapImageView
    imageView::MapImageView
    new MapImage(view::MapView, imgs::BasicImages[map,label,box])
        pre: view and imgs correspond
    fetchAndSetLabelCategories()::void throws IOException
    removeUnspecifiedLabels()::void

BoxImage
    new BoxImage(boxImg::BasicImage, alphaTreshold::int)
    (alphaTreshold: pixels alpha-value- over means show, under means hide)

    inner:
    LabelLayoutIter
        next()::LabelLayout
        hasMore()::Boolean(sets next)

        findBoxPoint()::Point/NULL
        findNeighborBoxPoint(LEFT/RIGHT, startBox::Box)::Point/NULL
        findNeighborRowPoint(UP/DOWN, startRow:Box[])::Point/NULL
        expandToRow(boxed-Point)::Box[]
        addBoxes(LEFT/RIGHT, startBox::Box, accum(contains startBox)::Box[])::Box[]
        addRows(UP/DOWN, startRow::Box[], labelLayout(accumulator, contains startRow))::LabelLayout
        removeLabel(layout::LabelLayout)::Void

        expandToBox(boxed-Point)::Box
            expandToBoxPoints(boxed-Point)::Point[]
            getCorners(points::Point[])::Point[](0Left 1Up 2Right 3Down)
                findExtremes(Point[])::Point[](0Left 1Up 2Right 3Down)
                rotate(Point[], deg)::Point[]

Label
    new Label(text::String, layout::LabelLayout, category)
    new Label(labelImg::BasicImage, layout::LabelLayout)
    text: String
    category: enum
    layout: LabelLayout
    setCategory(c::category enum)
    fetchCategory(double[wnes])::category enum (if place not found, returns undefined-category)

//skip
Labels(tied to a mapImage)
    labels Label[]
    new Labels(labelImg::BasicImage, boxImg::BoxImage)
        iter = new boxImage.LabelLayoutIter()
            layout = iter.next()
            labels[i] = new Label(labelImg, layout)
    fetchAndSetCategories(mapImageBasics)
        for each label:
            c = label.fetchCategory(mapImageBasics)
            label.setCategory(c)

LabelLayout
    new LabelLayout(row::Box[])
    letterBoxes: Box[row][pos in row]
    addRowFirst(row::Box[])
    addRowLast(row::Box[])
    getBoxes()::Box[] (1d)
    getBox(x,y)
    getTallestBoxHeight()::double
    getBounds()::double[xmin,ymin,xmax,ymax]
    hasRotation()::boolean

    innner:
    LetterBoxIter
        row = 0
        pos = 0
        next = null
        new LetterBoxIter()
        next()::Box
        hasMore()::boolean(sets next)

Box
    new Box(topLeft,topRight,bottomRight,bottomLeft)
    topLeft,topRight,height
    containsPoint(x::int, y::int)
    getRotation()::double
    isCentered(box::Box)::bool
    getWidth()::double
    getHeight()::double
    getTopLeft()::double[x,y]
    getTopRight()
    getBottomLeft()
    getBottomRight()
    getTopMid()
    getBottomMid()
    getLeftMid()
    getRightMid()
    getMid()
    getBounds()::double[xmin,ymin,xmax,ymax]

Map
    new Map(westLon::double, northLat, eastLon, southLat)
    bounds::double[WNES]
    zoomLevelImgs::MapImage[]
    addZoomLevel(img::MapImage)::void
    hasZoomLevel(int z)::bool
    getBounds()::double[]









Example:
mapBasics = new MapBasics(5345,34543,1280,1277,14)
BufferedImage[] imgs = fetchMapImages(mapBasics)    //network
mapImg = new MapImage(imgs[0])
labelsImg = new MapImage(imgs[1])
boxImg = new BoxImage(imgs[2])
map = new Map(mapBasics, mapImg, labelsImg, boxImg)
map.fetchAndSetLabelCategories()                    //network
map.removeUnspecifiedLabels()
//how many removed?


labels = new Labels(labelImg, boxImg):
    labels = []
    auxBImg = boxImg.clone()
    iter = new auxBImg.LabelLayoutIter()
    while (iter.hasMore())
        layout = iter.next()
        text = labelImg.detectLabel(layout)
        category = Label.fetchCategory(text)
        label = new Label(layout, text, category)
        labels.append(label)


iter = new auxBImg.LabelLayoutIter()
    next = NULL
    getNext() return next
    hasMore()::LabelLayout:
        p = findBoxedPoint()
        if p is NULL:
            next = NULL
            return FALSE

        startRow = expandToRow(p)
        layout = new LabelLayout(startRow)
        addRows(UP, startRow, layout)
        addRows(DOWN, startRow, layout)
        turnOffBoxedPoints(layout.getBoxes())
        next = layout
        return TRUE
