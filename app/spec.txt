MapFetcher, static
    fetchMapImges(mapBasics) -> MapImage[]
        [0] - fullMapImg
        [1] - labelsImg
        [2] - letterBoxesImg

        fetchRawImage(max dim 1280*1280) -> BufferedImage
        fetchMapImage(mapBasics)
            concatenateRawImages()..

MapImage
    new MapImage(BufferedImage)
    rotate(deg) -> MapImage
    extract(box) -> MapImage
    detectLabel(labelLayout)::string

BoxImage
    new BoxImage(letterBoxesImg::MapImage, alphaTreshold)
    (alphaTreshold: pixels alpha-value- over means show, under means hide)

    inner:
    LabelLayoutIter
        next()::LabelLayout
        hasMore()::Boolean(sets next)

        findBoxPoint()::Point/NULL
        findNeighborBoxPoint(LEFT/RIGHT, startBox::Box)::Point/NULL
        findNeighborRowPoint(UP/DOWN, startRow:Box[])::Point/NULL
        expandToRow(boxed-Point)::Box[]
        addBoxes(LEFT/RIGHT, startBox::Box, accum(contains startBox)::Box[])::Box[]
        addRows(UP/DOWN, startRow::Box[], labelLayout(accumulator, contains startRow))::LabelLayout
        removeLabel(layout::LabelLayout)::Void

        expandToBox(boxed-Point)::Box
            expandToBoxPoints(boxed-Point)::Point[]
            getCorners(points::Point[])::Point[](0Left 1Up 2Right 3Down)
                findExtremes(Point[])::Point[](0Left 1Up 2Right 3Down)
                rotate(Point[], deg)::Point[]

MapBasics
    new MapBasics(x,y,w,h,z)
    pos
    dim
    zoom
    getCornerPoints()::Point2D.Double[]-4corner-points

Label
    new Label(text, layout, category)
    text: String
    category: enum
    layout: LabelLayout
    setCategory(c::category enum)
    fetchCategory(mapBasics)::category enum

Labels
    labels Label[]
    new Labels(labelsImg::MapImage, letterBoxesImg::BoxImage)
        auxBImg = letterBoxesImg.clone() #iter edits img
        iter = new auxBImg.LabelLayoutIter()
            labelsImg.extract(box..)
            ...
    fetchAndSetCategories(mapBasics)
        for each label:
            c = label.fetchCategory(mapBasics)
            label.setCategory(c)

LabelLayout
    new LabelLayout(row::Box[])
    letterBoxes: Box[row][pos in row]
    addRowFirst(row::Box[])
    addRowLast(row::Box[])
    getBoxes()::Box[] (1d)
    getBox(x,y)
    getHighest()
    getLowest()
    getLeftest()
    getRightest()
    getAverageHeight()::double

    innner:
    LetterBoxIter
        row = 0
        pos = 0
        next = null
        new LetterBoxIter()
        next()::Box/null(delim)
        hasMore()::boolean(sets next)

Box
    new Box(topLeft,topRight,bottomRight,bottomLeft)
    topLeft,topRight,height
    getRotation() -> float
    getTopLeft()
    getTopRight()
    getBottomLeft()
    getBottomRight()
    getTopMid()
    getBottomMid()
    getLeftMid()
    getRightMid()
    getHighest()
    getLowest()
    getLeftest()
    getRightest()

Map(MapBasics)
    new Map(mapBasics, mapImg::MapImage, labelsImg(null?)::MapImage, letterBoxesImg::BoxImage)
    new Map(mapBasics, imgs::BufferedImage[]3pcs)
    new Map(maps::Map[][])
    mapBasics::MapBasics
    mapImg::MapImage
    labels::Labels
    fetchAndSetLabelCategories():
        labels.fetchAndSetCategories(mapBasics)
    removeUnspecifidLabels()









Example:
mapBasics = new MapBasics(5345,34543,1280,1277,14)
BufferedImage[] imgs = fetchMapImages(mapBasics)    //network
mapImg = new MapImage(imgs[0])
labelsImg = new MapImage(imgs[1])
boxImg = new BoxImage(imgs[2])
map = new Map(mapBasics, mapImg, labelsImg, boxImg)
map.fetchAndSetLabelCategories()                    //network
map.removeUnspecifiedLabels()
//how many removed?


labels = new Labels(labelImg, boxImg):
    labels = []
    auxBImg = boxImg.clone()
    iter = new auxBImg.LabelLayoutIter()
    while (iter.hasMore())
        layout = iter.next()
        text = labelImg.detectLabel(layout)
        category = Label.fetchCategory(text)
        label = new Label(layout, text, category)
        labels.append(label)


iter = new auxBImg.LabelLayoutIter()
    next = NULL
    getNext() return next
    hasMore()::LabelLayout:
        p = findBoxedPoint()
        if p is NULL:
            next = NULL
            return FALSE

        startRow = expandToRow(p)
        layout = new LabelLayout(startRow)
        addRows(UP, startRow, layout)
        addRows(DOWN, startRow, layout)
        turnOffBoxedPoints(layout.getBoxes())
        next = layout
        return TRUE
